	>>> matrix_mul = __import__("100-matrix_mul").matrix_mul

Funtion normal:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	[[7, 10], [15, 22]]

Funtion normal float 1:
	>>> matrix_mul([[1, 2.5], [3, 4]], [[1, 2], [3, 4]])
	[[8.5, 12.0], [15, 22]]

Funtion normal float 2:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2.5], [3, 4]])
	[[7, 10.5], [15, 23.5]]

Must be a list:
	>>> matrix_mul("Hello", [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

Must be a list:
	>>> matrix_mul([[1, 2], [3, 4]], "Hello")
	Traceback (most recent call last):
	TypeError: m_b must be a list

List of list:
	>>> matrix_mul(["Hello"], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

List of list:
	>>> matrix_mul([[1, 2], [3, 4]], ["Hello"])
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

List empty 1:
	>>> matrix_mul([[]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	ValueError: m_a can't be empty

List empty 2:
	>>> matrix_mul([[1, 2], [3, 4]], [[]])
	Traceback (most recent call last):
	ValueError: m_b can't be empty

List empty 3:
	>>> matrix_mul([], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	ValueError: m_a can't be empty

List empty 4:
	>>> matrix_mul([[1, 2], [3, 4]], [])
	Traceback (most recent call last):
	ValueError: m_b can't be empty

Must be int or float 1:
	>>> matrix_mul([["Hi", 2], [3, 4]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

Must be int or float 2:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, "Hello"], [3, 4]])
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

Row whit seem length 1:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
	Traceback (most recent call last):
	TypeError: each row of m_b must be of the same size

Row whit seem 2 length 2:
	>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: each row of m_a must be of the same size

If can't multiply:
	>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4], [5, 6]])
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied

Missing arguments:
	>>> matrix_mul()
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

Missing one argument:
	>>> matrix_mul([[1, 2], [3, 4]],)
	Traceback (most recent call last):
	TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

Integer * matrix:
	>>> matrix_mul([4], [[3, 4], [5, 6]])
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

Matrix * integer:
	>>> matrix_mul([[3, 4], [5, 6]], [4])
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

List * matrix:
	>>> matrix_mul([1, 2, 3, 4] , [[3, 4], [5, 6]])
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

Matrix * list:
	>>> matrix_mul([[3, 4], [5, 6]], [1, 2, 3, 4] )
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

Integer * matrix 1:
	>>> matrix_mul(4, [[3, 4], [5, 6]])
	Traceback (most recent call last):
	TypeError: m_a must be a list

Matrix * integer 1:
	>>> matrix_mul([[3, 4], [5, 6]], 4)
	Traceback (most recent call last):
	TypeError: m_b must be a list


The ``101-lazy_matrix_mul`` module
======================

Using ``lazy_matrix_mul``
-------------------

This is a funtion that multiply two matrix. First import
``lazy_matrix_mul`` from the ``101-lazy_matrix_mul`` module:

    >>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Normal:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	array([[ 7, 10],
	       [15, 22]])

No arguments:
	>>> m_a = []
	>>> m_b = []
	>>> lazy_matrix_mul(m_a, m_b)
	False

Only one arguments:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = []
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

Only one arguments:
	>>> m_a = []
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

Whit floats:
	>>> m_a = [[1.5, 2], [3, 4.2]]
	>>> m_b = [[1, 2.3], [3.5, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	array([[ 8.5 , 11.45],
	       [17.7 , 23.7 ]])

Whit string:
	>>> m_a = [["a", 2], [3, 4]]
	>>> m_b = [[1, 2], ["b", 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: data type must provide an itemsize

Size of rows:
	>>> m_a = [[1, 2, 5], [3, 4]]
	>>> m_b = [[1, 2], [3, 4, 5]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

No arguments:
	>>> m_a = [[]]
	>>> m_b = [[]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 1 (dim 0)

No arguments:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

No arguments:
	>>> m_a = [[]]
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

Type data:
	>>> m_a = "Hello"
	>>> m_b = "world"
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U5') dtype('<U5') dtype('<U5')

Type data:
	>>> m_a = "Hello"
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U5') dtype('<U5') dtype('<U5')

Be a list/matrix:
	>>> m_a = 2
	>>> m_b = 4
	>>> lazy_matrix_mul(m_a, m_b)
	8

Be a list/matrix:
	>>> m_a = 2
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	array([[2, 4],
	       [6, 8]])

Second matrix biger:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2], [3, 4], [5, 6]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

Arguments none:
	>>> m_a = None
	>>> m_b = None
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'

Numbert in string:
	>>> m_a = [[1, 2], ["3", 4]]
	>>> m_b = [[1, 2], [3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	Traceback (most recent call last):
	ValueError: data type must provide an itemsize

Negative:
	>>> m_a = [[1, -2], [3, 4]]
	>>> m_b = [[1, 2], [-3, 4]]
	>>> lazy_matrix_mul(m_a, m_b)
	array([[ 7, -6],
	       [-9, 22]])

Normal:
	>>> lazy_matrix_mul([[1, 2], [3, 4]])
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'
